#!/bin/bash
if [[ $(id -u) != 0 ]]; then
  echo "you need to be root"
  exit 0
fi

CAF_HOME="/users/localadmin/woelke/actor-framework"
BENCH_USER="localadmin"
OUT_DIR="/users/localadmin/woelke/test_data"
BIN_PATH="${CAF_HOME}/build/bin"
CAF_INI_FILE="caf-application.ini"
METRIC_SCRIPT="cpu_counters.py"
#METRIC_SCRIPT="metric_count_steals.py"
REPITITIONS=10
MIN_CORES=4
MAX_CORES=64

#todo_array="CLS-original;w-stealing;nop;nop CLS-thread-pinning;w-stealing;system;system LGS;w-stealing;node;node LGS-cache-optimized;w-stealing;node;cache"

#todo_array="CLS-original;stealing;system;system;br CLS-thread-pinning;w-stealing;system;system;br LGS;w-stealing;node;node;br LGS-cache-optimized;w-stealing;node;cache;br \
#CLS-original;stealing;system;system;cr CLS-thread-pinning;w-stealing;system;system;cr LGS;w-stealing;node;node;cr LGS-cache-optimized;w-stealing;node;cache;cr"

#todo_array="CLS-original;w-stealing;nop;nop;b CLS-thread-pinning;w-stealing;system;system;b LGS;w-stealing;node;node;b LGS-cache-optimized;w-stealing;node;cache;b \
#CLS-original;w-stealing;nop;nop;c CLS-thread-pinning;w-stealing;system;system;c LGS;w-stealing;node;node;c LGS-cache-optimized;w-stealing;node;cache;c"

#todo_array="LGS;w-stealing;node;node;b LGS-cache-optimized;w-stealing;node;cache;b LGS;w-stealing;node;node;c LGS-cache-optimized;w-stealing;node;cache;c"

todo_array="CLS-original;stealing;system;system;br CLS-thread-pinning;w-stealing;system;system;br \
CLS-original;stealing;system;system;cr CLS-thread-pinning;w-stealing;system;system;cr"

bench_args=""

# Preperation
rm -f ${OUT_DIR}/*
cd ${CAF_HOME}/benchmarks/scripts

unpack_props() {
  IFS=';' read -ra PROPS <<< "$1"
  tap=${PROPS[4]} #task-assign-pattern
  name="${PROPS[0]}-tap-${tap}"
  policy=${PROPS[1]}
  pinning_entity=${PROPS[2]}
  stealing_entity=${PROPS[3]}
  all_bench_args="${bench_args} --task-assign-pattern=${tap}"
}

# Run CAF benchmark suite
for todo_props in $todo_array ; do
  unpack_props $todo_props
cat >${BIN_PATH}/${CAF_INI_FILE} <<EOL
[scheduler]
policy='$policy'
[work-stealing]
aggressive-poll-attempts=100
aggressive-steal-interval=10
moderate-poll-attempts=500
moderate-steal-interval=5
moderate-sleep-duration=50
relaxed-steal-interval=1
relaxed-sleep-duration=10000
[lgs]
actor-pinning-entity='$pinning_entity'
w-stealing-entity='$stealing_entity'
EOL

  ./caf_run_benchmarks default $BENCH_USER $OUT_DIR --out-dir=${OUT_DIR} --bin-path=${BIN_PATH} --min-cores=${MIN_CORES} --max-cores=${MAX_CORES} --repetitions=${REPITITIONS} --label=caf --bench=numa_matrix_search --custom-args="${all_bench_args}" --label-suffix=${name}
  #./caf_run_benchmarks.py --bench-user=${BENCH_USER} --out-dir=${OUT_DIR} --bin-path=${BIN_PATH} --min-cores=${MIN_CORES} --max-cores=${MAX_CORES} --repetitions=${REPITITIONS} --metric-script="./metrics/${METRIC_SCRIPT}" --label=caf --bench=numa_matrix_search --custom-args="${bench_args}" --label-suffix=${name} #--pass_core_count_as_arg
done

# Create csv files
cd $OUT_DIR
${BIN_PATH}/to_csv *

duration=$SECONDS
echo "duration: $(($duration / 3600))h $((($duration / 60) % 60))m $(($duration % 60))s"
